"""
Debug the HTML files generated by the demo to identify JavaScript issues.
"""

import tempfile
from rh import MeshBuilder


def create_debug_version():
    """Create a debug version with console logging."""

    mesh_spec = {
        "temp_fahrenheit": ["temp_celsius"],
        "temp_kelvin": ["temp_celsius"],
    }

    functions_spec = {
        "temp_fahrenheit": "return temp_celsius * 9/5 + 32;",
        "temp_kelvin": "return temp_celsius + 273.15;",
    }

    initial_values = {"temp_celsius": 20.0}

    builder = MeshBuilder(mesh_spec, functions_spec, initial_values)

    # Create debug version
    tmpdir = tempfile.mkdtemp(prefix="rh_debug_demo_")
    builder.output_dir = tmpdir
    app_path = builder.build_app(title="Debug Temperature Converter")

    print(f"üì± Debug app created at: {app_path}")

    # Read the HTML content
    html_content = app_path.read_text()

    # Add debug JavaScript before the closing </body> tag
    debug_js = """
    <script>
        console.log("=== DEBUG: Starting JavaScript execution ===");
        
        // Check if libraries are loaded
        console.log("React loaded:", typeof React !== 'undefined');
        console.log("ReactDOM loaded:", typeof ReactDOM !== 'undefined');
        console.log("JSONSchemaForm loaded:", typeof JSONSchemaForm !== 'undefined');
        
        if (typeof JSONSchemaForm !== 'undefined') {
            console.log("JSONSchemaForm.default:", typeof JSONSchemaForm.default);
            console.log("JSONSchemaForm.validator:", typeof JSONSchemaForm.validator);
            console.log("JSONSchemaForm.validator.ajv8:", typeof JSONSchemaForm.validator.ajv8);
        }
        
        // Override renderForm to add debugging
        const originalRenderForm = window.renderForm;
        window.renderForm = function(formData) {
            console.log("=== DEBUG: renderForm called with formData:", formData);
            try {
                return originalRenderForm(formData);
            } catch (error) {
                console.error("=== DEBUG: Error in renderForm:", error);
                document.getElementById('rjsf-form').innerHTML = '<div style="color: red; padding: 20px; border: 2px solid red;">Error loading form: ' + error.message + '</div>';
            }
        };
        
        // Add error handler for the initial render
        window.addEventListener('load', function() {
            console.log("=== DEBUG: Window loaded, checking form render ===");
            setTimeout(function() {
                const formDiv = document.getElementById('rjsf-form');
                if (formDiv && formDiv.innerHTML.trim() === '') {
                    console.error("=== DEBUG: Form div is empty after render ===");
                    formDiv.innerHTML = '<div style="color: orange; padding: 20px; border: 2px solid orange;">Form failed to render - check browser console for errors</div>';
                }
            }, 2000);
        });
        
        console.log("=== DEBUG: Debug JavaScript setup complete ===");
    </script>
    """

    # Insert debug script before </body>
    debug_html = html_content.replace("</body>", debug_js + "\n</body>")

    # Write debug version
    debug_path = app_path.parent / "debug_index.html"
    debug_path.write_text(debug_html)

    print(f"üîç Debug version created at: {debug_path}")
    print(f"üåê Open this in your browser: file://{debug_path}")
    print(f"üîß Then open browser console (F12) to see debug messages")

    return debug_path


if __name__ == "__main__":
    create_debug_version()
